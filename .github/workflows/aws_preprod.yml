# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Preprod Deploy - Nginx/Svelte/Flask

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2
  ECS_SERVICE: nivalta-web-app
  ECS_CLUSTER: DevWebApp
  ECS_TASK_DEFINITION: ../../infra/nivalta_production_w_containers.template.json
  SVELTE_CONTAINER_NAME: svlete-server
  FLASK_CONTAINER_NAME: flask-server
  NGINX_CONTAINER_NAME: nginx                         

permissions:
  contents: read

jobs:
  deploy:
    name: DeployFlask
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        include:
          - ecr_repository: nivalta/sveltekit-server
            docker_file: app/sveltekit/
          - ecr_repository: nivalta/flask-server
            docker_file: app/api/
          - ecr_repository: nivalta/nginx-proxy
            docker_file: nginx/

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-svelte-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ matrix.ecr_repository }}
        DOCKERFILE: ${{ matrix.docker_file }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.

        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $DOCKERFILE
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: render-svelte-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: infra/nivalta_production_w_containers.template.json
        container-name: ${{ env.SVELTE_CONTAINER_NAME }}
        image: $ECR_REGISTRY/nivalta/${{ env.SVELTE_CONTAINER_NAME }}

    - name: Modify Amazon ECS task definition with Flask container
      id: render-flask-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        container-name: ${{ env.FLASK_CONTAINER_NAME }}
        image: $ECR_REGISTRY/nivalta/${{ env.FLASK_CONTAINER_NAME }}

    - name: Modify Amazon ECS task definition with NGINX container
      id: render-nginx-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        container-name: ${{ env.NGINX_CONTAINER_NAME }}
        image: $ECR_REGISTRY/nivalta/${{ env.NGINX_CONTAINER_NAME }}:$IMAGE_TAG

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
