# Single shared network for all services
volumes:
  authdb_vol:
  uploadsdb_vol:
  uploads_vol:
  ocrdb_vol:
  pages_vol:

networks:
  app-network:
    driver: bridge
  auth-network:
    external: true
    name: authentication_auth-network
  uploads-network:
    external: true
    name: uploads_uploads-network
  ocr-network:
    external: true
    name: ocr-service_ocr-network
      

services:
  
  react-server:
    volumes:
      - ./react/src:/usr/src/react/src
      - ./react/public:/usr/src/react/public
      - ./react/vite.config.js:/usr/src/react/vite.config.js
      - ./react/tailwind.config.js:/usr/src/react/tailwind.config.js
      - ./react/postcss.config.js:/usr/src/react/postcss.config.js
      - ./react/index.html:/usr/src/react/index.html
    networks:
      - app-network
    build: ./react
    environment:
      - PROD=false
      - HOST=0.0.0.0
      - PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  local-auth-db:
    extends:
      file: ./python/authentication/docker-compose.yaml
      service: local-auth-db
    networks:
      - auth-network
    volumes:
      - authdb_vol:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-api:
    extends:
      file: ./python/authentication/docker-compose.yaml
      service: auth-api
    networks:
      - app-network
      - auth-network
    depends_on:
      local-auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/auth/version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
  local-uploads-db:
    extends:
      file: ./python/uploads/docker-compose.yaml
      service: local-uploads-db
    networks:
      - uploads-network
    volumes:
      - uploadsdb_vol:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  uploads-api:
    extends:
      file: ./python/uploads/docker-compose.yaml
      service: uploads-api
    networks:
      - app-network
      - uploads-network
    volumes:
      - uploads_vol:/usr/src/uploads/uploads
    depends_on:
      local-uploads-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/uploads/version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  ocr-api:
    extends:
      file: ./python/ocr/docker-compose.yaml
      service: ocr-api
    networks:
      - app-network
      - ocr-network
    volumes:
      - pages_vol:/usr/src/ocr-service/pages
    depends_on:
      local-ocr-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/api/ocr/version"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  local-ocr-db:
    extends:
      file: ./python/ocr/docker-compose.yaml
      service: local-ocr-db
    networks:
      - ocr-network
    volumes:
      - ocrdb_vol:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    environment:
      - AUTHENTICATION_SERVICE_HOST=auth-api
      - UPLOADS_HOST=uploads-api
      - OCR_SERVICE_HOST=ocr-api
      - REACT_SERVICE_HOST=react-server
    ports:
      - 80:80
    networks:
      - app-network
    depends_on:
      auth-api:
        condition: service_healthy
      uploads-api:
        condition: service_healthy
      ocr-api:
        condition: service_healthy
      react-server:
        condition: service_healthy