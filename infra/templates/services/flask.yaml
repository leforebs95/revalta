AWSTemplateFormatVersion: '2010-09-09'
Description: 'Flask API Service Configuration for Nivalta'

Parameters:
  Environment:
    Type: String
    Description: Environment name
    AllowedValues:
      - prod
      - preprod

  ECSCluster:
    Type: String
    Description: Name of the ECS Cluster

  PublicSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: First public subnet ID

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Second public subnet ID

  TaskDefinitionsStackName:
    Type: String
    Description: Name of the Task Definitions Stack

  TaskDefinitionARN:
    Type: String
    Description: ARN of the Flask Task Definition
  
  ServiceDiscoveryARN:
    Type: String
    Description: ARN of the Service Discovery for Flask

  SecurityGroupId:
    Type: String
    Description: Name of the Security Groups Stack

  LaunchType:
    Type: String
    Default: FARGATE
    AllowedValues:
      - FARGATE
      - EC2

  PublicIP:
    Type: String
    Default: ENABLED
    AllowedValues:
      - ENABLED
      - DISABLED

  DesiredCount:
    Type: Number
    Default: 1
    MinValue: 0
    Description: Desired number of tasks

  MaxCount:
    Type: Number
    Default: 4
    MinValue: 1
    Description: Maximum number of tasks for auto scaling

  MinCount:
    Type: Number
    Default: 1
    MinValue: 0
    Description: Minimum number of tasks for auto scaling

  APIRequestThreshold:
    Type: Number
    Default: 1000
    Description: Number of requests per target before scaling
    MinValue: 100

Resources:
  FlaskService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Environment}-flask-api
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinitionARN
      DesiredCount: !Ref DesiredCount
      LaunchType: !Ref LaunchType
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref PublicIP
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          SecurityGroups:
            - !Ref SecurityGroupId
      ServiceRegistries:
        - RegistryArn: !Ref ServiceDiscoveryARN
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-flask-api
        - Key: Environment
          Value: !Ref Environment

  # Auto Scaling Configuration
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref MinCount
      ResourceId: !Join 
        - '/'
        - - service
          - !Ref ECSCluster
          - !GetAtt FlaskService.Name
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # CPU-based scaling
  CPUScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${Environment}-flask-cpu-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # Request count based scaling
  RequestCountScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${Environment}-flask-request-scaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          MetricName: RequestCountPerTarget
          Namespace: AWS/ApplicationELB
          Dimensions:
            - Name: TargetGroup
              Value: !Sub ${TaskDefinitionsStackName}-FlaskTargetGroupName
          Statistic: Sum
          Unit: Count
        TargetValue: !Ref APIRequestThreshold
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # CloudWatch Alarms
  APILatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-flask-api-latency
      AlarmDescription: API latency is too high
      MetricName: Latency
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt FlaskService.Name
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  API5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-flask-5xx-errors
      AlarmDescription: Too many 5XX errors
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: TargetGroup
          Value: !Sub ${TaskDefinitionsStackName}-FlaskTargetGroupName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  # # Dashboard for monitoring
  # ServiceDashboard:
  #   Type: AWS::CloudWatch::Dashboard
  #   Properties:
  #     DashboardName: !Sub ${Environment}-flask-api-dashboard
  #     DashboardBody: !Sub |
  #       {
  #         "widgets": [
  #           {
  #             "type": "metric",
  #             "width": 12,
  #             "height": 6,
  #             "properties": {
  #               "metrics": [
  #                 [ "AWS/ECS", "CPUUtilization", "ServiceName", "${FlaskService.Name}", "ClusterName", "${ECSCluster}" ]
  #               ],
  #               "period": 300,
  #               "stat": "Average",
  #               "region": "${AWS::Region}",
  #               "title": "CPU Utilization"
  #             }
  #           },
  #           {
  #             "type": "metric",
  #             "width": 12,
  #             "height": 6,
  #             "properties": {
  #               "metrics": [
  #                 [ "AWS/ApplicationELB", "RequestCountPerTarget" ]
  #               ],
  #               "period": 300,
  #               "stat": "Sum",
  #               "region": "${AWS::Region}",
  #               "title": "Request Count"
  #             }
  #           }
  #         ]
  #       }

Outputs:
  ServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt FlaskService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName

  ServiceArn:
    Description: ARN of the ECS Service
    Value: !Ref FlaskService
    Export:
      Name: !Sub ${AWS::StackName}-ServiceArn

  AutoScalingTargetArn:
    Description: ARN of the Auto Scaling Target
    Value: !Ref ServiceScalingTarget
    Export:
      Name: !Sub ${AWS::StackName}-AutoScalingTargetArn

  # DashboardURL:
  #   Description: URL for the CloudWatch Dashboard
  #   Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Environment}-flask-api-dashboard