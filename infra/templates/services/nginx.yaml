AWSTemplateFormatVersion: '2010-09-09'
Description: "Nginx Service Configuration"

Parameters:
  Environment:
    Type: String
    AllowedValues: [prod, preprod]
  
  ECSCluster:
    Type: String
  
  TaskDefinitionsStackName:
    Type: String
  
  ServiceDiscoveryStackName:
    Type: String
  
  SecurityGroupsStackName:
    Type: String
  
  LoadBalancerStackName:
    Type: String
  
  PublicSubnetOne:
    Type: AWS::EC2::Subnet::Id
  
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet::Id
  
  LaunchType:
    Type: String
    Default: FARGATE
    AllowedValues: [FARGATE, EC2]
  
  PublicIP:
    Type: String
    Default: ENABLED
    AllowedValues: [ENABLED, DISABLED]

Resources:
  NginxService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Environment}-nginx-proxy
      Cluster: !Ref ECSCluster
      TaskDefinition:  !Sub ${TaskDefinitionsStackName}-NginxTaskDefArn
      DesiredCount: 1
      LaunchType: !Ref LaunchType
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !Ref PublicIP
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
          SecurityGroups: 
            - !Sub ${SecurityGroupsStackName}-NginxProxySecurityGroupId
      HealthCheckGracePeriodSeconds: 120
      ServiceRegistries:
        - RegistryArn: !Sub ${ServiceDiscoveryStackName}-NginxServiceDiscoveryArn
      LoadBalancers:
        - ContainerName: nginx-proxy
          ContainerPort: 80
          TargetGroupArn: !Sub ${LoadBalancerStackName}-TargetGroupArn
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-nginx-proxy
        - Key: Environment
          Value: !Ref Environment

  # ServiceScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MaxCapacity: 4
  #     MinCapacity: 1
  #     ResourceId: !Join 
  #       - '/'
  #       - - service
  #         - !Ref ECSCluster
  #         - !GetAtt NginxService.Name
  #     RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs

  # CPUScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${Environment}-nginx-cpu-scaling
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       TargetValue: 70.0
  #       ScaleInCooldown: 300
  #       ScaleOutCooldown: 60

  # MemoryScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${Environment}-nginx-memory-scaling
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageMemoryUtilization
  #       TargetValue: 80.0
  #       ScaleInCooldown: 300
  #       ScaleOutCooldown: 60

Outputs:
  ServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt NginxService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName
  
  ServiceArn:
    Description: ARN of the ECS Service
    Value: !Ref NginxService
    Export:
      Name: !Sub ${AWS::StackName}-ServiceArn