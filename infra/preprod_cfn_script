#!/bin/bash
set -e

# Configuration
STACK_NAME="nivalta-preprod"
REGION="us-west-2"
ENVIRONMENT="preprod"
DOMAIN="nivalta.com"
ECS_CLUSTER_NAME="PreprodCluster"
HOSTED_ZONE_ID="Z038076911017Z7RFFFTJ"
TEMPLATE_BUCKET="nivalta-cloudformation-$ENVIRONMENT"

# Validate AWS CLI configuration
if ! aws sts get-caller-identity &>/dev/null; then
    echo "Error: AWS credentials not configured"
    exit 1
fi

# Create S3 bucket for storing template state if it doesn't exist
TEMPLATE_BUCKET="nivalta-cloudformation-$ENVIRONMENT"
if ! aws s3 ls "s3://$TEMPLATE_BUCKET" 2>&1 >/dev/null; then
    echo "Creating template bucket..."
    aws s3 mb "s3://$TEMPLATE_BUCKET" --region $REGION
fi

# Upload templates to S3
echo "Uploading templates..."
aws s3 sync ./templates "s3://$TEMPLATE_BUCKET/templates"

# Package tasks
aws cloudformation package \
    --template-file templates/tasks/main.yaml \
    --s3-bucket $TEMPLATE_BUCKET \
    --output-template-file packaged-tasks.yaml

# Package services
aws cloudformation package \
    --template-file templates/services/main.yaml \
    --s3-bucket $TEMPLATE_BUCKET \
    --output-template-file packaged-services.yaml

# Package main template
aws cloudformation package \
    --template-file templates/nivalta-stack.yaml \
    --s3-bucket $TEMPLATE_BUCKET \
    --output-template-file packaged-template.yaml

# Upload packaged templates
aws s3 cp packaged-tasks.yaml "s3://$TEMPLATE_BUCKET/templates/tasks/main.yaml"
aws s3 cp packaged-services.yaml "s3://$TEMPLATE_BUCKET/templates/services/main.yaml"

# Deploy stack
aws cloudformation deploy \
    --template-file packaged-template.yaml \
    --stack-name $STACK_NAME \
    --region $REGION \
    --capabilities CAPABILITY_NAMED_IAM \
    --parameter-overrides \
    Environment=$ENVIRONMENT \
    DomainName=$DOMAIN \
    SubDomainPrefix=$ENVIRONMENT \
    HostedZoneId=$HOSTED_ZONE_ID \
    ECSClusterName=$ECS_CLUSTER_NAME \
    --tags \
    Environment=$ENVIRONMENT \
    Project=nivalta

# Check stack status
STACK_STATUS=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query 'Stacks[0].StackStatus' \
    --output text)

if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
    echo "Stack deployment successful"

    # Output important stack information
    aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs' \
        --output table
else
    echo "Stack deployment failed with status: $STACK_STATUS"
    exit 1
fi
