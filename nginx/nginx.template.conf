user nginx;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##
	sendfile on;
    tcp_nopush on;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

	# Dual environment resolver configuration
    # 127.0.0.11 - Docker's internal DNS
    # 169.254.169.253 - AWS VPC DNS resolvery
    resolver 127.0.0.11 169.254.169.253 valid=10s;
    resolver_timeout 10s;

	##
    # SSL Settings
    ##
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log detailed;

	##
	# Gzip Settings
	##

	gzip on;
  	gzip_proxied any;
  	gzip_types text/plain application/json;
  	gzip_min_length 1000;

	# More granular temp file settings
	client_body_temp_path    /tmp/nginx/client_temp 1 2;
	proxy_temp_path         /tmp/nginx/proxy_temp 1 2;
	fastcgi_temp_path      /tmp/nginx/fastcgi_temp 1 2;
	uwsgi_temp_path        /tmp/nginx/uwsgi_temp 1 2;
	scgi_temp_path         /tmp/nginx/scgi_temp 1 2;

	# Configure temp file usage
	client_body_in_file_only off;
	client_body_buffer_size 128k;
	client_max_body_size 1G;

	# Temp file write thresholds
	client_body_in_single_buffer on;
	client_body_timeout 300s;
	client_header_timeout 300s;

	upstream react_backend {
        server ${REACT_SERVICE_HOST}:8080 max_fails=3 fail_timeout=10s;
        keepalive 32;
    }

    upstream authentication_backend {
        server ${AUTHENTICATION_SERVICE_HOST}:5000 max_fails=3 fail_timeout=10s;
        keepalive 32;
    }

	upstream uploads_backend {
		server ${UPLOADS_HOST}:5001 max_fails=3 fail_timeout=10s;
		keepalive 32;
	}

	upstream ocr_backend {
		server ${OCR_SERVICE_HOST}:5002 max_fails=3 fail_timeout=10s;
		keepalive 32;
	}

	##
	# Virtual Host Configs
	##
	server {
        listen 80;
		server_name localhost 127.0.0.1;

		# Health check endpoint for AWS
        location /health {
            access_log off;
			add_header Content-Type text/plain;
            return 200 'healthy\n';
        }

        location / {
            proxy_pass http://react_backend;
			proxy_http_version  1.1;
			proxy_set_header    Upgrade $http_upgrade;
			proxy_set_header    Connection "upgrade";
			proxy_set_header    Host $host;
			proxy_set_header    X-Real-IP $remote_addr;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Host $server_name;

            # Error handling for DNS resolution
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
        }

        location /api/auth {
			
			# Reject requests with unsupported HTTP method
			if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
				return 405;
			}

			# Handle Requests to the API
            proxy_pass http://authentication_backend;
			proxy_http_version  1.1;
			proxy_set_header    Upgrade $http_upgrade;
			proxy_set_header    Connection "upgrade";
			proxy_set_header    Host $host;
			proxy_set_header    X-Real-IP $remote_addr;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Host $server_name;

            # Error handling for DNS resolution
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
        }

		location /api/uploads {
			
			# Reject requests with unsupported HTTP method
			if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
				return 405;
			}

			# Handle Requests to the API
			proxy_pass http://uploads_backend;
			proxy_http_version  1.1;
			proxy_set_header    Upgrade $http_upgrade;
			proxy_set_header    Connection "upgrade";
			proxy_set_header    Host $host;
			proxy_set_header    X-Real-IP $remote_addr;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Host $server_name;

			# Error handling for DNS resolution
			proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
			proxy_next_upstream_tries 3;
		}

		location /api/ocr {
			
			# Reject requests with unsupported HTTP method
			if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
				return 405;
			}

			# Handle Requests to the API
			proxy_pass http://ocr_backend;
			proxy_http_version  1.1;
			proxy_set_header    Upgrade $http_upgrade;
			proxy_set_header    Connection "upgrade";
			proxy_set_header    Host $host;
			proxy_set_header    X-Real-IP $remote_addr;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Forwarded-Host $server_name;

			# Error handling for DNS resolution
			proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
			proxy_next_upstream_tries 3;
		}
	}
}